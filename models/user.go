package models

import (
	"log"

	"golang.org/x/crypto/bcrypt"
)

type User struct {
	ID int `properties:"PRIMARY KEY AUTOINCREMENT"`
	Username string
	Password string
}

func (user User) Create() User {
	// password of the user must be hashed
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(user.Password), bcrypt.DefaultCost)
    if err != nil {
        panic(err)
    }
    user.Password = string(hashedPassword)

	// update users id with the autogenerated
	// id from the database
	user.ID = Insert(user)
	
	return user
}

func (user User) Fetch() User {
	// password of the user must be hashed
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(user.Password), bcrypt.DefaultCost)
    if err != nil {
        panic(err)
    }
    user.Password = string(hashedPassword)

	rows := Fetch(user)
	for rows.Next() {
		err := rows.Scan(&user.ID, &user.Username, &user.Password)
		if err != nil {
			log.Fatal("Failed to fetch user from database")
		}
	}
	return user
}